# docker-compose.dev.yml - Development environment
version: '3.8'

services:
  # FastAPI Backend Service
  spatial-viz-app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        ENVIRONMENT: development
    container_name: spatial-viz-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://spatial_user:spatial_pass@postgres:5432/spatial_viz
      - LOG_LEVEL=debug
      - RELOAD=true
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      # Mount source code for hot reload
      - .:/app
      # Persistent data volumes
      - app-data:/app/data
      - notebook-storage:/app/notebooks
      - app-temp:/app/temp
    networks:
      - spatial-viz-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: spatial-viz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - spatial-viz-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: spatial-viz-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=spatial_viz
      - POSTGRES_USER=spatial_user
      - POSTGRES_PASSWORD=spatial_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - spatial-viz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spatial_user -d spatial_viz"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Optional: Jupyter Notebook Service for development/testing
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: spatial-viz-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
    volumes:
      - ./notebooks:/home/jovyan/work/notebooks
      - ./data:/home/jovyan/work/data
    networks:
      - spatial-viz-network
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
    restart: unless-stopped

  # Optional: MinIO for S3-compatible object storage (for testing)
  minio:
    image: minio/minio:latest
    container_name: spatial-viz-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio-data:/data
    networks:
      - spatial-viz-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

networks:
  spatial-viz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  app-data:
    name: spatial-viz-app-data
  redis-data:
    name: spatial-viz-redis-data
  postgres-data:
    name: spatial-viz-postgres-data
  notebook-storage:
    name: spatial-viz-notebook-storage
  app-temp:
    name: spatial-viz-app-temp
  minio-data:
    name: spatial-viz-minio-data

